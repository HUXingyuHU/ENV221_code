"red",
ifelse(iris$Species == "versicolor",
"blue",
"darkgreen")),
cex = 1,
pch = ifelse(iris$Species == "setosa",
17,
ifelse(iris$Species == "versicolor",
12,
19)))
axis(side = 1)
axis(side = 4)
beginr::plotlty()
beginr::plotcolorbar()
?hcl
hcl(1)
plot(iris$Sepal.Length,
col = ifelse(iris$Species == "setosa",
"red",
ifelse(iris$Species == "versicolor",
"blue",
"darkgreen")),
cex = 1,
pch = ifelse(iris$Species == "setosa",
17,
ifelse(iris$Species == "versicolor",
12,
19)))
hcl(1)
?hcl
csphd(hcl(h = c(30, 120, 210, 300),
c = 20, l = 90, fixup = FALSE))
csd <- matrix(c( 4,2,4,6, 4,3,1,4, 4,7,7,1,
0,7,3,2, 4,5,3,2, 5,4,2,2,
3,1,3,0, 4,4,6,7, 1,10,8,7,
1,5,3,2, 1,5,2,1, 4,1,4,3,
0,3,0,6, 2,1,5,5), nrow = 4)
csphd <- function(colors)
barplot(csd, col = colors, ylim = c(0,30),
names.arg = 72:85, xlab = "Year", ylab = "Students",
legend.text = c("Winter", "Spring", "Summer", "Fall"),
main = "Computer Science PhD Graduates", las = 1)
library(ggplot2)
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width))
axis(4)
axis(side = 4)
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width), color = "blue")
"darkgreen"))
ggplot(iris) +
geom_point(aes(x = Sepal.Length,
y = Sepal.Width),
color = ifelse(iris$Species == "setosa",
"red",
ifelse(iris$Species == "versicolor",
"blue",
"darkgreen")))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = "blue"))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Sepal.Width))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width), color = "blue")
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Sepal.Width))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width), size = 3)
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, size = Species))ggplot(iris) +
ggplot(iris) +
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, size = Species))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, size = Species))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Sepal.Width, size = Species))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Sepal.Width, size = Sepal.Width))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Sepal.Width, size = Sepal.Length))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width), shape = 2)
# beginr::plotpch()
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, shape = Species))
function (x, y, ...)
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width)) +
geom_smooth(aes(x = Sepal.Length, y = Sepal.Width))
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width)) +
geom_smooth(aes(x = Sepal.Length, y = Sepal.Width))
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_smooth(method = "lm")
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width)) +
facet_wrap(~ Species)
ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width)) +
theme_light()
ggplot(iris) +
geom_bar(aes(Species))
?aes
ggplot(iris) +
geom_bar(aes(Species))
ggplot(iris) +
geom_bar(aes(Species)) +
coord_flip()
ggplot(iris) + geom_histogram(aes(Sepal.Length))
ggplot(iris) + geom_boxplot(aes(Sepal.Length))
# install.packages("GGally")
library(GGally)
install.packages("GGally")
# install.packages("GGally")
library(GGally)
ggpairs(iris, aes(colour=Species, alpha=0.5))
install.packages("plotyly")
library(plotly)
plot_ly(x = iris$Sepal.Length, y = iris$Sepal.Width)
ggplotly(p1)
p1 <- ggplot(iris) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species))
ggplotly(p1)
p2 <- ggpairs(iris, aes(colour=Species, alpha=0.5))
ggplotly(p2)
install.packages("rgl")
x <- seq(-10, 10, length = 20)
y <- x
f <- function(x, y) {r <- sqrt(x^2 + y^2); 10 * sin(r)/r}
z <- outer(x, y, f)
z[is.na(z)] <- 1
library(rgl)
persp3d(x, y, z, col = "darkgreen")
library(msg)
library(MSG)
msg("matcars-smooth")
msg("mtcars-smooth")
msg("dunibds-hex")
msg("diamonds-hex")
msg("ggplot2-violin")
msg("iris-ggplot2")
msg("quake6-bubbles")
msg("diamonds-cut")
msg("diamonds-polar")
pdf('df_plot.pdf')
plot(iris$Sepal.Length)
dev.off()
ggparis(iris, aes(colour = Species, alpha = 0.5))
ggpairs(iris, aes(colour = Species, alpha = 0.5))
ggsave("df_ggpairs.pdf")
# 1. What are the following functions used for? Create a table with the
# function names as one column and the function usage as another.
?plot
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
a <- ?plot
a
beginr
library(beginr)
?begir
?beginr
??beginr
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
?plot
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
?base::plot
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
?base::plot$Description
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
dim(?base::plot)
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
help(base::plot)
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
help(plot)
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
help(base::plot)
?help
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
help(base, plot)
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
help(base, "plot")
?help
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
help("plot")
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
help("base::plot")
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
help("plot")
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
help("plot")
?help
help(base)
?help
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
a <- help("plot")
a
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
a <- ?base::plot
a
print(a)
?symbols
print(a)
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
a <- data.frame(?base::plot)
help(plot, package = "base")
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
a <- file(?base::plot)
print(a)
a
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
a <- write.csv(?base::plot)
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
a <- file(?base::plot)
dim(a)
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
a <- c(?base::plot)
a
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
a <- c(?base::plot$Description)
help(plot, package = "base", "Description")
a <- help(plot, package = "base", "Description")
a
help(help)
a <- help(plot, package = "base", "Description", help_type = "text")
a
a <- help(plot, package = "base", "Description", help_type = "text")
a
write.table(a)
a <- help(plot, package = "base", help_type = "text")
a
help(help)
a <- file.copy(help(plot, package = "base", help_type = "text"))
help(file.copy)
a <- file.copy(help(plot, package = "base", help_type = "text"), b)
b
b <- data.frame()
a <- file.copy(help(plot, package = "base", help_type = "text"), )
a <- file.copy(help(plot, package = "base", help_type = "text"), b)
a <- file.copy(help(plot, package = "base"), b)
a <- help(plot, package = "base")
a
beginr
library(beginr)
help(help)
read.table(help(plot, package = "base", help_type = "text"))
# 1. What are the following functions used for? Create a table with the function
# names as one column and the function usage as another.
a <- ?base::plot
print(a)
beginr::
print(a)
a <- help(plot, package = "base")
a
a <- help(plot, package = "base", help_type = "text")
a
a <- help(plot, package = "base", help_type = "html")
a
a <- help(plot, package = "base", help_type = "pdf")
a
install.packages("rvest")
library(rvest)
a <- read_html(help(plot, package = "base"))
a <- help(plot, package = "base")
a
install.packages("xml2")
install.packages("xml2")
?xml2
library(xml2)
?xml2
help(xml2)
??xml2
a <- read_xml(help(plot, package = "base"))
?read_xml
a <- help(plot, package = "base")
xml_data <- read_xml(a)
help(help)
a <- help(plot, package = "base", help_type = "html")
xml_data <- read_xml(a)
help(help)
help(help)
a <- help(plot, package = "base", help_type = "pdf")
xml_data <- read_xml(a)
a
a <- help(plot, package = "base", help_type = "pdf")
a <- help(plot, package = "base", help_type = "text")
a
xml_data <- read_text(a)
xml_data <- read_txt(a)
b <- readLines(a)
??beginr
extract_help <- function(pkg, fn = NULL, to = c("txt", "html", "latex", "ex")){
to <- match.arg(to)
rdbfile <- file.path(find.package(pkg), "help", pkg)
rdb <- tools:::fetchRdDB(rdbfile, key = fn)
convertor <- switch(to,
txt   = tools::Rd2txt,
html  = tools::Rd2HTML,
latex = tools::Rd2latex,
ex    = tools::Rd2ex
)
f <- function(x) capture.output(convertor(x))
if(is.null(fn)) lapply(rdb, f) else f(rdb)
}
extrac_help(plot)
extract_help(plot)
extract_help("plot")
extract_help("base", "plot")
extract_help("base", "plot", "html")
extract_help("base", "hist", "html")
extract_help(hist", "html")
extract_help("hist", "html")
?hist
extract_help("graphics", "hist", "html")
extract_help("graphics", "hist")
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
airquality
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[Month == 6, 1])
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1])
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 5, 1])
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1], na.omit = TRUE)
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1])
boxplot(airquality[airquality$Month == 6, 1], na.omit = TRUE)
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1])
boxplot(airquality[airquality$Month == 6, 1], na.omit = TRUE)
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1])
boxplot(airquality[airquality$Month == 6, 1], na.omit = TRUE)
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1])
boxplot(airquality[airquality$Month == 6, 1], na.omit = TRUE)
6, 1])
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1])
# 2.2 Make a histogram of the early afternoon ozone concentration in June.
hist(airquality[airquality$Month == 6, 1])
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1])
?boxplot
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1])
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1])
# 2.2 Make a histogram of the early afternoon ozone concentration in June.
hist(airquality[airquality$Month == 6, 1])
# 2.2 Make a histogram of the early afternoon ozone concentration in June.
hist(airquality[airquality$Month == 6, 1],
x.lab = "Ozone Concentration")
?hist
# 2.2 Make a histogram of the early afternoon ozone concentration in June.
hist(airquality[airquality$Month == 6, 1],
axes = "Ozone Concentration")
?hist
# 2.2 Make a histogram of the early afternoon ozone concentration in June.
hist(airquality[airquality$Month == 6, 1],
breaks = "Ozone Concentration")
# 2.2 Make a histogram of the early afternoon ozone concentration in June.
hist(airquality[airquality$Month == 6, 1],
xlab = "Ozone Concentration")
?hist
# 2.2 Make a histogram of the early afternoon ozone concentration in June.
hist(airquality[airquality$Month == 6, 1],
main = "Histogram of the early afternoon ozone concentration in June",
xlab = "Ozone Concentration")
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1])
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1],
ylab = "Ozone Concentration")
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1],
main = "boxplot of the early afternoon ozone concentration in June",
ylab = "Ozone Concentration")
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
boxplot(airquality[airquality$Month == 6, 1],
main = "Boxplot of the early afternoon ozone concentration in June",
ylab = "Ozone Concentration")
# 2.4 Save the boxplot and histogram as .pdf files.
?pdf
# 2.4 Save the boxplot and histogram as .pdf files.
pdf('ozone_boxplot')
# 2.4 Save the boxplot and histogram as .pdf files.
pdf('ozone_boxplot', file = '~/Graphs')
# 2. The air quality dataset was introduced in Lecture 1. Import it into R. This
# and the subsequent tasks will do some analysis based on this dataset.
#
# 2.1 Make a boxplot of the early afternoon ozone concentration in June.
ozone_boxplot <- boxplot(airquality[airquality$Month == 6, 1],
main = "Boxplot of the early afternoon ozone concentration in June",
ylab = "Ozone Concentration")
plot(ozone_boxplot)
plot('ozone_boxplot')
library(ggplot2)
ggplot(airquality) + geom_boxplot(aes(airquality$Month == 6, 1))
ggplot(airquality) + geom_boxplot(aes(Month == 6, 1))
ggplot(airquality) + geom_boxplot(aes(Month == 6, Ozone))
ggplot(airquality) + geom_boxplot(aes(Month == 6, Ozone), na.rm = TRUE)
ggplot(airquality) + geom_boxplot(aes(Month == 6, Ozone, na.omit == TRUE))
ggplot(airquality) + geom_boxplot(aes(Month == 6, Ozone))
ggplot(airquality) + geom_boxplot(aes(Month == 6, !is.na(Ozone)))
ggplot(airquality) + geom_boxplot(aes(Month == 6, Ozone))
ggplot(!is.na(airquality)) + geom_boxplot(aes(Month == 6, Ozone))
ggplot(airquality) + geom_boxplot(aes(Month == 6, Ozone))
?geom_boxplot
?aes
ggplot(airquality) + geom_boxplot(aes([Month == 6, Ozone]))
ggplot(airquality) + geom_boxplot(aes(Month == 6, Ozone))
ggplot(airquality) + geom_boxplot(aes(Month == 6 && Ozone))
ggplot(airquality) + geom_boxplot(aes(Month == 6, Ozone))
ggplot(airquality) + geom_boxplot(aes(Month == 6))
ggplot(airquality) + geom_boxplot(aes(Ozone))
ggplot(airquality[airquality$month == 6,]) + geom_boxplot(aes(Ozone))
ggplot(airquality[airquality$Month == 6,]) + geom_boxplot(aes(Ozone))
ozone_boxplot <- ggplot(airquality[airquality$Month == 6,]) + geom_boxplot(aes(Ozone))
?geon_boxplot
?geom_boxplot
ozone_boxplot <- ggplot(airquality[airquality$Month == 6,]) +
geom_boxplot(aes(Ozone), show.legend = FALSE)
ozone_boxplot
ozone_boxplot <- ggplot(airquality[airquality$Month == 6,]) +
geom_boxplot(aes(Ozone))
ozone_boxplot
?geom_boxplot
?ggplot
library(ggpairs)
# 2.4 Save the boxplot and histogram as .pdf files.
ggsave("Ozone_boxplot.pdf", ozone_boxplot, '~/Graphs')
